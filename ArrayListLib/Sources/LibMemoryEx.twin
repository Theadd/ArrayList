Public Module LibMemoryEx

    Private DeclareWide PtrSafe Sub RtlMoveMemory Lib "kernel32" (ByVal lpDest As LongPtr, ByVal lpSource As LongPtr, ByVal Size As LongPtr)
    Private Declare PtrSafe Sub FillMemory Lib "kernel32" Alias "RtlFillMemory" (Destination As Any, ByVal Length As Long, ByVal Fill As Byte)
    Private Declare PtrSafe Function SafeArrayCopyData Lib "oleaut32" (ByRef psaSource As Any, ByRef psaTarget As Any) As Long

    Private Declare PtrSafe Function CoTaskMemAlloc Lib "ole32.dll" (ByVal cb As Long) As LongPtr
    Private Declare PtrSafe Sub CoTaskMemFree Lib "ole32.dll" (ByVal pv As LongPtr)

    Public Const FADF_AUTO As Long = &H1            ' An array that is allocated on the stack.
    Public Const FADF_VARIANT As Long = &H800       ' An array of VARIANTs.
    Public Const FADF_EMBEDDED As Long = &H4        ' An array that is embedded in a structure.
    Public Const FADF_FIXEDSIZE As Long = &H10      ' An array that may not be resized or reallocated.
    Public Const FADF_HAVEVARTYPE As Long = &H80    ' An array that has a variant type. The variant type can be retrieved with SafeArrayGetVartype.

    Public Const INT_SIZE As Long = 2
    
    Public Const SAFEARRAY_CELEMENTS_OFFSET As Long = VARIANT_SIZE / INT_SIZE + 4 + PTR_SIZE

    Public Function CreateMemoryCopy(ByRef TargetAddress As LongPtr, ByVal SourceAddress As LongPtr, ByVal ByteCount As Long) As Boolean
        TargetAddress = CoTaskMemAlloc(ByteCount)
        If TargetAddress <> 0 Then
            CopyMemory ByVal TargetAddress, ByVal SourceAddress, ByteCount
            Return True
        End If
    End Function

    Public Sub FreeMemoryCopy(ByVal TargetAddress As LongPtr)
        If TargetAddress <> 0 Then CoTaskMemFree TargetAddress
    End Sub

    Public Sub ReassignArrayTo(ByRef Destination As Variant, ByRef Source As Variant)
        MemLongPtr(VarPtrArr(Destination)) = MemLongPtr(VarPtrArr(Source))
        MemLongPtr(VarPtrArr(Source)) = vbNullPtr
    End Sub

    Public Sub ZeroMemory(ByVal TargetAddress As LongPtr, ByVal ByteCount As Long)
        FillMemory ByVal TargetAddress, ByteCount, CByte(0)
    End Sub

    Public Sub VariantArrayClone(ByVal DestinationAddress As LongPtr, ByVal SourceAddress As LongPtr, ByVal GetCount As Long, Optional ByVal ArrayElementSize As Long = VARIANT_SIZE)
        Dim sASrc As SAFEARRAY_1D, sADst As SAFEARRAY_1D
        With sASrc
            .cDims = 1
            .cbElements = ArrayElementSize
            .fFeatures = IIf(ArrayElementSize = VARIANT_SIZE, FADF_VARIANT, 0)
            .pvData = SourceAddress
            .rgsabound0.cElements = GetCount
        End With
        With sADst
            .cDims = 1
            .cbElements = ArrayElementSize
            .fFeatures = IIf(ArrayElementSize = VARIANT_SIZE, FADF_VARIANT Or FADF_EMBEDDED, FADF_EMBEDDED)
            .pvData = DestinationAddress
            .rgsabound0.cElements = GetCount
        End With
        SafeArrayCopyData ByVal VarPtr(sASrc), ByVal VarPtr(sADst)
        With sASrc
            .pvData = vbNullPtr
            .rgsabound0.cElements = 0
        End With
        With sADst
            .cbElements = 2
            .fFeatures = FADF_EMBEDDED
            .pvData = vbNullPtr
            .rgsabound0.cElements = 0
        End With
    End Sub
    
    Type UDTStringPointer
        Value As String
    End Type

    Private Sub LSetByVal(ByRef Target As UDTStringPointer, ByVal Value As String)
        LSet Target.Value = Value
    End Sub
    
    ' CopyMemory (Win32/Forward-only) using BSTR/LSet
    Private Sub MemMoveBSTR(ByRef Target As LongPtr, ByRef Source As LongPtr, ByVal ByteCount As Long)
        Dim lbs0 As Long, lbs1 As Long, src As String
        VBA.GetMem4 Source, lbs0
        VBA.GetMem4 Target, lbs1
        VBA.PutMem4 Source, ByteCount - 4
        VBA.PutMem4 Target, ByteCount - 4
        VBA.PutMemPtr VarPtr(src), Source + 4
        LSetByVal Target + 4, src
        VBA.PutMemPtr VarPtr(src), vbNullPtr
        VBA.PutMem4 Target, lbs0
        VBA.PutMem4 Source, lbs0
        If ByteCount > Target - Source Then
            VBA.PutMem4 Target + (Target - Source), lbs1
        End If
    End Sub
    
    Public Sub MemMoveEx(ByVal Target As LongPtr, ByVal Source As LongPtr, ByVal ByteCount As LongPtr)
        Const MAX_LONG As Long = &H7FFFFFFF&
    	If Target > Source Then
            If Source + ByteCount > Target Then
                ' Move Forward + Overlapping
                #If Win64 Then
                    RtlMoveMemory Target, Source, ByteCount
                #Else
                    Const chunkSize As Long = VARIANT_SIZE * 4000
                    Dim c As Long, nChunks As Long = CLng((ByteCount - 1) \ chunkSize)
                    MemMoveBSTR Target + (nChunks * chunkSize), Source + (nChunks * chunkSize), CLng(ByteCount - nChunks * chunkSize)
                    For c = nChunks - 1 To 0 Step -1
                        MemMoveBSTR Target + (c * chunkSize), Source + (c * chunkSize), chunkSize
                    Next c
                #End If
            ElseIf ByteCount < MAX_LONG Then
                ' Move Forward + No overlapping
                VBA.vbaCopyBytes CLng(ByteCount), Target, Source
            Else
            	' Move Forward + No overlapping + More than 2GB exceeding Long
                RtlMoveMemory Target, Source, ByteCount
            End If
        ElseIf ByteCount < MAX_LONG Then
        	' Move Backwards
            VBA.vbaCopyBytes CLng(ByteCount), Target, Source
        Else
            ' Move Backwards + More than 2GB exceeding Long
            RtlMoveMemory Target, Source, ByteCount
        End If
    End Sub

End Module
