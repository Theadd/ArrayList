[ InterfaceId ("8ABD76D4-42F5-4920-927A-BC766E00CE46") ]
[ Description ("Make a new object which is a copy of the object instanced.  This object may be either deep copy or a shallow copy depending on the implementation of clone.") ]
Public Interface ICloneable
    Function Clone() As Variant
End Interface

[ InterfaceId ("F078EB73-3FA5-47F4-8003-520AEA1CE315") ]
Public Interface IEnumerable
    [ Enumerator ]
    Function GetEnumerator(Optional ByVal Index As Long = 0, Optional ByVal GetCount As Variant, Optional ByVal GetStep As Long = 1, Optional ByRef ThisEnumerator As Any) As stdole.IUnknown
End Interface

[ InterfaceId ("B2E5C8F5-2847-450B-873B-F4BE7621F627") ]
[ Description ("Base interface for all collections") ]
Public Interface ICollection Extends IEnumerable
    Sub CopyTo(Target As Variant, Index As Long)
    Property Get Count() As Long
    Property Get SyncRoot() As Variant
    Property Get IsSynchronized() As Boolean
End Interface

[ InterfaceId ("BC694131-C923-4813-9D34-C79C5E2F6980") ]
[ Description ("Base interface for all lists.") ]
Public Interface IList Extends ICollection
    [ Description ("The Item property provides methods to read and edit entries in the List.") ]
    Property Get Item(ByVal Index As Long) As Variant
    Property Let Item(ByVal Index As Long, Value As Variant)
    Property Set Item(ByVal Index As Long, Value As Variant)
    [ Description ("Adds an item to the list. The return value is the position the new element was inserted in.") ]
    Function Add(Value As Variant) As Long
    [ Description ("Returns whether the list contains a particular item.") ]
    Function Contains(Value As Variant) As Boolean
    [ Description ("Removes all items from the list.") ]
    Sub Clear()
    Property Get IsReadOnly() As Boolean
    Property Get IsFixedSize() As Boolean
    [ Description ("Returns the index of a particular item. Returns -1 if the item isn't in the list.") ]
    Function IndexOf(Value As Variant, Optional ByVal Index As Long = 0, Optional ByVal GetCount As Variant) As Long
    [ Description ("Inserts value into the list at position Index. Index must be non-negative and less than or equal to the number of elements in the list. If Index equals the number of items in the list, then value is appended to the end.") ]
    Sub Insert(ByVal Index As Long, Value As Variant)
    [ Description ("Removes an item from the list.") ]
    Sub Remove(Value As Variant)
    [ Description ("Removes the item at position index.") ]
    Sub RemoveAt(ByVal Index As Long)
End Interface

[ InterfaceId ("480A22F9-91B0-483A-8A33-11634FCF644A") ]
Public Interface IListRange Extends IList
    Sub AddRange(Target As Variant)
    Sub InsertRange(ByVal Index As Long, Target As Variant)
    Function GetRange(ByVal Index As Long, ByVal GetCount As Long) As IListRange
    [ Description ("Removes a range of elements from the list.") ]
    Sub RemoveRange(ByVal Index As Long, ByVal GetCount As Long)
    Sub SetRange(ByVal Index As Long, Target As Variant)
    Function ToArray() As Variant()
    [ Description ("Sorts the elements in a section of this list. The sort compares the elements to each other using the given IComparer interface.") ]
    Sub Sort(Optional ByVal Index As Long = 0, Optional ByVal GetCount As Variant, Optional ByRef Comparer As IComparer = Nothing)
    Function BinarySearch(ByVal Index As Long, ByVal GetCount As Long, ByRef Value As Variant, Optional ByRef Comparer As IComparer = Nothing) As Long
    [ Hidden ]
    Function GetAddressOfItemAt(Index As Long) As LongPtr
End Interface

[ InterfaceId ("1043D433-27BB-40F7-9255-50F4724FAB94") ]
Public Interface IArrayList Extends IListRange
    Implements ICloneable
    
    Function Clone() As Variant Implements ICloneable.Clone
    [ Hidden ]
    Property Get Version() As Long
    Property Get Capacity() As Long
    Property Let Capacity(Value As Long)
    [ Description ("CAUTION: Limit usage only in For Each In .Items calls, do NOT assign the return value of .Items to another variable unless you know what you're doing.") ]
    [ Hidden ]
    Function Items() As Variant()
    [ Hidden ]
    Sub CloneTo(ByVal Target As IArrayList, ByRef Source As IArrayList, ByVal Index As Long, ByVal GetCount As Long)
    Function LastIndexOf(ByRef Value As Variant, Optional ByVal Index As Variant, Optional ByVal GetCount As Variant) As Long
    Sub Reverse(Optional ByVal Index As Long = 0, Optional ByVal GetCount As Variant)
End Interface

[ CoClassId ("229DE972-5045-4F2D-BFF8-BDFD1F6F32F6") ]
[ CoClassCustomConstructor ("ArrayListFactory.CreateArrayList") ]
[ COMCreatable ]
Public CoClass ArrayList
    [ Default ] Interface IArrayList
    Interface IArrayList
End CoClass

Module ArrayListFactory
    Public Function CreateArrayList(ByRef out As IArrayList) As Long
        Set out = New ArrayListClass
        ' Const S_OK As Long = 0
        ' Return S_OK
    End Function
End Module

